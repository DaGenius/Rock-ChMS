//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
// SHAREALIKE 3.0 UNPORTED LICENSE:
// http://creativecommons.org/licenses/by-nc-sa/3.0/
//
using System;
using System.Collections.Generic;
using System.Dynamic;

using Rock.Data;

namespace Rock.Core
{
    /// <summary>
    /// Data Transfer Object for Note object
    /// </summary>
    public partial class NoteDto : IDto
    {

#pragma warning disable 1591
        public bool IsSystem { get; set; }
        public int NoteTypeId { get; set; }
        public int? EntityId { get; set; }
        public int? SourceTypeValueId { get; set; }
        public string Caption { get; set; }
        public DateTime Date { get; set; }
        public bool? IsAlert { get; set; }
        public string Text { get; set; }
        public int Id { get; set; }
        public Guid Guid { get; set; }
#pragma warning restore 1591

        /// <summary>
        /// Instantiates a new DTO object
        /// </summary>
        public NoteDto ()
        {
        }

        /// <summary>
        /// Instantiates a new DTO object from the entity
        /// </summary>
        /// <param name="note"></param>
        public NoteDto ( Note note )
        {
            CopyFromModel( note );
        }

        /// <summary>
        /// Creates a dictionary object.
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, object> ToDictionary()
        {
            var dictionary = new Dictionary<string, object>();
            dictionary.Add( "IsSystem", this.IsSystem );
            dictionary.Add( "NoteTypeId", this.NoteTypeId );
            dictionary.Add( "EntityId", this.EntityId );
            dictionary.Add( "SourceTypeValueId", this.SourceTypeValueId );
            dictionary.Add( "Caption", this.Caption );
            dictionary.Add( "Date", this.Date );
            dictionary.Add( "IsAlert", this.IsAlert );
            dictionary.Add( "Text", this.Text );
            dictionary.Add( "Id", this.Id );
            dictionary.Add( "Guid", this.Guid );
            return dictionary;
        }

        /// <summary>
        /// Creates a dynamic object.
        /// </summary>
        /// <returns></returns>
        public virtual dynamic ToDynamic()
        {
            dynamic expando = new ExpandoObject();
            expando.IsSystem = this.IsSystem;
            expando.NoteTypeId = this.NoteTypeId;
            expando.EntityId = this.EntityId;
            expando.SourceTypeValueId = this.SourceTypeValueId;
            expando.Caption = this.Caption;
            expando.Date = this.Date;
            expando.IsAlert = this.IsAlert;
            expando.Text = this.Text;
            expando.Id = this.Id;
            expando.Guid = this.Guid;
            return expando;
        }

        /// <summary>
        /// Copies the model property values to the DTO properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyFromModel( IEntity model )
        {
            if ( model is Note )
            {
                var note = (Note)model;
                this.IsSystem = note.IsSystem;
                this.NoteTypeId = note.NoteTypeId;
                this.EntityId = note.EntityId;
                this.SourceTypeValueId = note.SourceTypeValueId;
                this.Caption = note.Caption;
                this.Date = note.Date;
                this.IsAlert = note.IsAlert;
                this.Text = note.Text;
                this.Id = note.Id;
                this.Guid = note.Guid;
            }
        }

        /// <summary>
        /// Copies the DTO property values to the entity properties
        /// </summary>
        /// <param name="model">The model.</param>
        public void CopyToModel ( IEntity model )
        {
            if ( model is Note )
            {
                var note = (Note)model;
                note.IsSystem = this.IsSystem;
                note.NoteTypeId = this.NoteTypeId;
                note.EntityId = this.EntityId;
                note.SourceTypeValueId = this.SourceTypeValueId;
                note.Caption = this.Caption;
                note.Date = this.Date;
                note.IsAlert = this.IsAlert;
                note.Text = this.Text;
                note.Id = this.Id;
                note.Guid = this.Guid;
            }
        }
    }
}
